version: 2.1
commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible 
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: Install Node.js 13
    steps:
    - run:
        name: Install Node.js 13
        command: |
          curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
          sudo apt install -y nodejs
   

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          # Consider if 'when: on_fail' is truly what you want for the destroy logic
          # If you always want to run this destroy step when the command is called, remove 'when: on_fail'
          when: on_fail
          command: |
            echo "Attempting to destroy environment: << parameters.Workflow_ID >>" # Added for clarity
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >> || echo "Failed to delete backend stack or stack does not exist."
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive || echo "Failed to remove S3 bucket or bucket does not exist."
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >> || echo "Failed to delete frontend stack or stack does not exist."
      # --- REMOVE THE LINE BELOW ---
      # - destroy-environment

      # --- Consider if this persist step really belongs in the destroy command ---
      # Usually, you persist data needed by *later* jobs. Destroy is often the *last* thing.
      - persist_to_workspace:
          root: ~/
          paths:
           - project/.circleci/ansible/inventory.txt

  revert-migrations:
    description: Revert database migrations
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        description: "The workflow ID (or relevant part) to check migration status against."
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_ << parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if [[ $SUCCESS -eq 1 ]]; then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
             cd frontend
              npm install
              npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      # - notify_on_failure
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      # - notify_on_failure

  test-frontend:
    docker:

      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test
      # - notify_on_failure
   
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end  Unit Test
          command: |
            cd backend
            npm install
            npm test
      # - notify_on_failure


            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end  scan
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical || true
      # - notify_on_failure
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end security scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
     
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-$(echo "${CIRCLE_WORKFLOW_ID:0:7}" | tr '[:upper:]' '[:lower:]')" \
              --parameter-overrides ID=$(echo "${CIRCLE_WORKFLOW_ID:0:7}" | tr '[:upper:]' '[:lower:]')  
              
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |  
      #       BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
      #         --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --output text)
      #       echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
      #       cat .circleci/ansible/inventory.txt
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt
      #  # - destroy-environment
      - run:
         name: Add back-end ip to ansible inventory
         command: |

                    echo "Attempting to fetch IP for tag: Name=backend-${CIRCLE_WORKFLOW_ID:0:7}"
       
                    BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                      --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --output text)

                    echo "IP Address Fetched: [$BACKEND_PUBLIC_IP]" # Debug echo

                    # Create/Overwrite the inventory file with the group header
                    # Make sure the path here is correct relative to the project root
                    echo "[web]" > .circleci/ansible/inventory.txt

                    # Append the fetched IP address to the inventory file
                    echo "$BACKEND_PUBLIC_IP" >> .circleci/ansible/inventory.txt

                    echo "Final contents of inventory file in this step:"
                    # Make sure the path here is correct relative to the project root
                    cat .circleci/ansible/inventory.txt        
                              
                    
            
 

      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt # This path seems correct assuming your working_directory is ~/project
      
###################
  configure-infrastructure:
    docker:
      - image: cimg/base:stable # Or similar base image
    steps:
      - checkout
      - install_ansible # This seems to be a custom or orb step
      - add_ssh_keys:
          fingerprints: ["SHA256:FJogcncZoAfN0hgvqhqDgAiiOafEii9G+HsAStU+Ok4"] # Placeholder for your actual fingerprint
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt # This line was added to show the inventory content
            ansible-playbook -i inventory.txt configure-server.yml
  run-migrations:
    docker:
      - image:  cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: prepare environment for backend build
          command: |
            echo "ENVIRONMENT=production" > backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=postgres" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> backend/.env
            echo "TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts" >> backend/.env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            echo "DB_SSL=${DB_SSL}" >> backend/.env
            echo "NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}" >> backend/.env
            echo "PGSSLMODE=require" >> backend/.env
      - run:
          name: Install dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
          
            sudo apt update
            sudo apt install -y awscli curl
            
      - run:
          name: Run migrations
          command: |
            cd backend
            npm ci
            if [ -f .env ]; then
              export $(grep -v '^#' .env | xargs)
            fi
            if [ -z "${KVDB_BUCKET}" ]; then
              echo "ERROR: KVDB_BUCKET environment variable is not set. Cannot update KVDB."
              exit 1
            fi
            npm run migrations > ./migrations_dump.txt 2>&1
            migration_status_code=$?
            cat ./migrations_dump.txt
            if [[ "${migration_status_code}" -ne 0 ]]; then
              echo "ERROR: 'npm run migrations' command failed with exit code ${migration_status_code}."
              exit "${migration_status_code}"
            fi
            echo "Migration command completed successfully (exit code 0). Checking output for success messages..."
            if grep -E -q "has been executed successfully.|No migrations are pending" ./migrations_dump.txt; then
              echo "Found expected success message ('migration executed' or 'no migrations pending') in log."
              echo "--- Updating KVDB status key ---"
              curl -sf -X PUT \
                "https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}" \
                -d '1' || {
                  curl_exit_code=$?
                  echo "ERROR: curl command failed to update kvdb.io with exit code ${curl_exit_code}."
                  echo "Check network connectivity, KVDB_BUCKET value ('${KVDB_BUCKET}'), and kvdb.io service status."
                  exit $curl_exit_code
                }
              echo "KVDB status updated successfully via curl."
            else
              echo "WARNING: Migration command succeeded (exit code 0), but NEITHER 'has been executed successfully.' NOR 'No migrations are pending' was found in the output."
              echo "Skipping KVDB update due to unrecognized success output."
            fi
            echo "Migration and KVDB update check process finished successfully."
      - destroy-environment
      - revert-migrations


             
        

  deploy-frontend:
    docker: 
    - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend: 
  
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - attach_workspace:
          at: ~/project
      - run:

          name: Deploy backend # This step now includes dynamic inventory generation
          command: |
            # --- Navigate to backend, install deps, build (Keep these existing steps) ---
            cd backend
            npm install
            npm run build

            cd .. # Go back to the project root (where .circleci directory is)

            # Package backend artifact
            tar -C backend -czvf artifact.tar.gz .
            # Ensure the target directory exists before copying
            mkdir -p .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            # --- End of existing steps ---

            # --- START: DYNAMIC INVENTORY GENERATION ---
            echo "--- Starting dynamic inventory generation ---"
            # !!! IMPORTANT !!!
            # Configure your AWS Region if not already set as an environment variable in CircleCI
            # export AWS_DEFAULT_REGION="your-aws-region" # Example: us-east-1
            export AWS_REGION=eu-north-1 # Use default if set, otherwise set manually here or as CircleCI env var

            # 1. Find the EC2 Instance
            # !!! ADJUST THIS COMMAND TO FIND YOUR SPECIFIC INSTANCE !!!
            # Example: Find instance by tag 'Name'
            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=your-backend-instance-name-tag" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].InstanceId" --output text --region ${AWS_REGION})

            # Handle case where instance is not found
            if [ -z "$INSTANCE_ID" ]; then
              echo "Error: Could not find a running EC2 instance with the specified tag."
              exit 1 # Fail the job if no target instance is found
            fi

            # 2. Get the Public IP Address
            INSTANCE_IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query "Reservations[*].Instances[*].PublicIpAddress" --output text --region ${AWS_REGION})

            # Handle case where instance is found but has no public IP
            if [ -z "$INSTANCE_IP" ]; then
              echo "Error: Found instance $INSTANCE_ID but could not get its Public IP."
              echo "Is it in a public subnet with auto-assign public IP enabled, or associated with an Elastic IP?"
              exit 1 # Fail the job
            fi

            echo "Found Target EC2 Instance IP: $INSTANCE_IP"

            # 3. Write to inventory.txt file
            # The inventory file is needed in the .circleci/ansible directory for Ansible to find it
            INVENTORY_FILE_PATH=".circleci/ansible/inventory.txt"

            echo "[webserver]" > ${INVENTORY_FILE_PATH} # Create/overwrite the file with a group header
            echo "$INSTANCE_IP" >> ${INVENTORY_FILE_PATH} # Add the IP address
            echo "[all:children]" >> ${INVENTORY_FILE_PATH} # Add the children definition
            echo "webserver" >> ${INVENTORY_FILE_PATH} # Include the group in 'all'

            echo "--- Generated Dynamic Inventory file contents: ---"
            cat ${INVENTORY_FILE_PATH} # Print the file contents for verification in the logs
            echo "--- End of Generated Inventory ---"
            # --- END: DYNAMIC INVENTORY GENERATION ---


            # --- START: Run Ansible Playbook ---
            # Now, change directory to where the playbook and the generated inventory are
            cd .circleci/ansible

            # Run Ansible playbook using the dynamically created inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            # --- END: Run Ansible Playbook ---


  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y curl
            sudo apt install -y awscli
            aws --version
      - run:
          name: Backend smoke test.
          command: |       
              #!/bin/bash -eo pipefail
              STACK_SUFFIX=${CIRCLE_WORKFLOW_ID:0:7}
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${STACK_SUFFIX}" "Name=instance-state-name,Values=running" \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --output text)

              # Check if BACKEND_PUBLIC_IP is empty
              if [ -z "$BACKEND_PUBLIC_IP" ]; then
                echo "Error: No EC2 instances found with the specified tag."
                exit 1
              fi

              echo "Retrieved BACKEND_PUBLIC_IP: $BACKEND_PUBLIC_IP"

              # Set API URL
              export API_URL=http://${BACKEND_PUBLIC_IP}:3030

              echo "API URL: $API_URL"

              # Check API status
              RESPONSE=$(curl -s $API_URL/api/status)
              echo "API Response: $RESPONSE"

              if echo "$RESPONSE" | grep "ok"; then
                echo "Smoke test passed."
                exit 0
              else 
                echo "Smoke test failed. 'ok' not found in API response."
                exit 1 
              fi 

                  

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              echo SUCCESS
              exit 0
            else
              echo FAIL
              exit 1
            fi
 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-infrastructure]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
 

#####################################################



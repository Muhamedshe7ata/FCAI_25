# - name: "install node exporter."
#   unarchive:
#     src: https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz
#     dest: /tmp
#     remote_src: yes
#     validate_certs: false 
# - name: "move binary to /usr/local/bin."
#   become: true
#   copy:
#     src: /tmp/node_exporter-1.3.1.linux-amd64/node_exporter
#     dest: /usr/local/bin/node_exporter
#     remote_src: yes
#     mode: '0777'
    
# - name: "add node exporter configuration."
#   become: true  
#   copy:
#     src: node_exporter.service
#     dest: /etc/systemd/system/

# - name: "enable node_exporter service"
#   become: true
#   systemd:
#     state: restarted
#     daemon_reload: yes
#     name: node_exporter
#     enabled: yes


### ai code :
---
# Define variables at the top level for this role execution
# vars have been moved to a separate file

# ----- TASKS START HERE -----
# Add this debug task:
- name: "Debug role variables"
  ansible.builtin.debug:
    msg: "Archive path is {{ node_exporter_archive_path | default('VARIABLE NOT DEFINED') }}"
# Task 1: Download the archive ON THE TARGET using curl
- name: "Download node exporter archive on target using curl"
  ansible.builtin.shell:
    cmd: "curl -L -s -S -o {{ node_exporter_archive_path }} {{ node_exporter_download_url }}"
    creates: "{{ node_exporter_archive_path }}"
  register: download_result
  failed_when: download_result.rc != 0 and 'already exists' not in download_result.stderr|default('') # Added default filter
- name: "Download node exporter archive on target using curl"
  ansible.builtin.shell:
    cmd: "curl -L -s -S -o {{ node_exporter_archive_path }} {{ node_exporter_download_url }}"
    creates: "{{ node_exporter_archive_path }}"
  register: download_result
  failed_when: 
    - download_result.rc != 0
    - "'already exists' not in download_result.stderr|default('')"
  become: false
- name: Check contents of /tmp after unarchive
  ansible.builtin.command: ls -la /tmp
  register: ls_tmp_result
  become: false # Reading /tmp often doesn't need root

- name: Display /tmp contents
  ansible.builtin.debug:
    var: ls_tmp_result.stdout_lines
########### DEBUGGING TASKS ###########
- name: Check contents of expected extract path ({{ node_exporter_extract_path }})
  ansible.builtin.command: ls -la {{ node_exporter_extract_path }}
  register: ls_extract_path_result
  become: false
  ignore_errors: true # Ignore if the directory doesn't exist

- name: Display expected extract path contents
  ansible.builtin.debug:
    var: ls_extract_path_result.stdout_lines
  when: ls_extract_path_result.rc == 0 # Only show if command succeeded

# Task 3: Move the binary to the final location
- name: "Move node_exporter binary to {{ node_exporter_binary_path }}"
  ansible.builtin.copy:
    src: "{{ node_exporter_extract_path }}/node_exporter" # Revert to this path
    dest: "{{ node_exporter_binary_path }}"
    remote_src: yes
    mode: '0755'
    owner: root
    group: root
  become: true

# Task 4: Add node exporter systemd configuration
- name: "Add node exporter configuration."
  ansible.builtin.copy:
    src: node_exporter.service # Assuming this file is in the role's files/ or templates/ dir
    dest: "{{ node_exporter_service_path }}"
  become: true

# Task 5: Enable and start the node_exporter service
- name: "Enable and start node_exporter service"
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: yes
    name: node_exporter
    enabled: yes
  become: true
  # Task 6: Clean up temporary files
- name: "Remove temporary archive and extracted file"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ node_exporter_archive_path }}" # The .tar.gz file
    - "/tmp/node_exporter" # The extracted binary we just copied
    # Add "{{ node_exporter_extract_path }}" to the loop ONLY if you find it does create the directory
  become: false # Removing files from /tmp may not need root, adjust if necessary


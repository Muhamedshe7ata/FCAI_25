# tasks file for deploy role
---
- name: Creates backend app directory
  ansible.builtin.file:
    path: ~/backend-app
    state: directory
    mode: '0755'

- name: Unarchive backend files
  ansible.builtin.unarchive:
    src: artifact.tar.gz
    dest: ~/backend-app
    remote_src: no

# --- Block to Install Node.js and npm using NVM (Node Version Manager) ---
- name: Ensure prerequisites for NVM and building Node.js (curl, build-essential)
  ansible.builtin.apt:
    name:
      - curl
      - build-essential
    state: present
    update_cache: yes
  become: true

- name: Check if NVM is already installed for user 'ubuntu'
  ansible.builtin.stat:
    path: /home/ubuntu/.nvm/nvm.sh
  become: true
  become_user: ubuntu
  register: nvm_check

- name: Download and install NVM for user 'ubuntu' # TEST: single line shell
  ansible.builtin.shell: echo "TEST - NVM Download and Install placeholder"
  args:
    executable: /bin/bash # Still good to have if it were a real command
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
  when: not nvm_check.stat.exists
  register: nvm_install_result
  changed_when: false # Placeholder

- name: Ensure NVM sourcing lines are in .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^export NVM_DIR="\$HOME\/\.nvm"$'
    line: 'export NVM_DIR="$HOME/.nvm"'
    state: present
    create: yes
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  become: true
  become_user: root

- name: Add NVM script sourcing to .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^\s*\[ -s "\$NVM_DIR\/nvm\.sh" \] && \\\. "\$NVM_DIR\/nvm\.sh"\s*# This loads nvm\s*$'
    line: '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm'
    state: present
  become: true
  become_user: root

- name: Add NVM bash completion sourcing to .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^\s*\[ -s "\$NVM_DIR\/bash_completion" \] && \\\. "\$NVM_DIR\/bash_completion"\s*# This loads nvm bash_completion\s*$'
    line: '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion'
    state: present
  become: true
  become_user: root

# # THIS ENTIRE TASK IS COMMENTED OUT
# - name: Install latest LTS Node.js and set as default using NVM for user 'ubuntu'
#   ansible.builtin.shell: |
#     echo "This is a parsing test for the NVM install task"
#   args:
#     executable: /bin/bash
#   become: true
#   become_user: ubuntu
#   environment:
#     HOME: /home/ubuntu
#     NVM_DIR: /home/ubuntu/.nvm

# --- End of Node.js Installation Block using NVM ---

- name: Installing Node Dependencies # TEST: single line shell
  ansible.builtin.shell: echo "TEST - NPM Install placeholder"
  args:
    executable: /bin/bash
    chdir: ~/backend-app
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm

- name: Installing PM2 globally using NVM's Node # TEST: single line shell
  ansible.builtin.shell: echo "TEST - PM2 Global Install placeholder"
  args:
    executable: /bin/bash
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm
  register: pm2_global_install # Will register echo output
  changed_when: false # Placeholder

- name: Ensuring app is started/restarted with PM2 # TEST: single line shell
  ansible.builtin.shell: echo "TEST - PM2 startOrRestart placeholder"
  become: true
  become_user: ubuntu
  args:
    chdir: ~/backend-app
    executable: /bin/bash
  environment:
    HOME: /home/ubuntu
    PM2_HOME: /home/ubuntu/.pm2
    NVM_DIR: /home/ubuntu/.nvm
  register: execute_node # Will register echo output

- name: Print PM2 start/restart message
  ansible.builtin.debug:
    msg: "{{ execute_node.stdout_lines | default(['No output from placeholder']) }}" # Default if not run

- name: Configure pm2 to start as service on system boot # TEST: single line shell
  become: true
  ansible.builtin.shell: echo "TEST - PM2 startup placeholder"
  args:
    executable: /bin/bash
  register: pm2_startup # Will register echo output
  changed_when: false # Placeholder

- name: Save PM2 process list to allow resurrect on reboot # TEST: single line shell
  ansible.builtin.shell: echo "TEST - PM2 save placeholder"
  become: true
  become_user: ubuntu
  args:
    executable: /bin/bash
  environment:
    HOME: /home/ubuntu
    PM2_HOME: /home/ubuntu/.pm2
    NVM_DIR: /home/ubuntu/.nvm
  changed_when: false
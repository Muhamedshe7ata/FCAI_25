---
# tasks file for deploy role

- name: Creates backend app directory for ubuntu user
  ansible.builtin.file:
    path: /home/ubuntu/backend-app
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'
  become: true

- name: Unarchive backend files into ubuntu user's backend-app directory
  ansible.builtin.unarchive:
    src: artifact.tar.gz
    dest: /home/ubuntu/backend-app
    remote_src: no
  become: true

- name: Ensure correct ownership of unarchived backend files
  ansible.builtin.file:
    path: /home/ubuntu/backend-app
    state: directory
    recurse: yes
    owner: ubuntu
    group: ubuntu
  become: true

- name: Ensure prerequisites for NVM and building Node.js (curl, build-essential)
  ansible.builtin.apt:
    name:
      - curl
      - build-essential
    state: present
    update_cache: yes
  become: true

- name: Check if NVM is already installed for user 'ubuntu'
  ansible.builtin.stat:
    path: /home/ubuntu/.nvm/nvm.sh
  become: true
  become_user: ubuntu
  register: nvm_check

- name: Download and install NVM for user 'ubuntu'
  ansible.builtin.shell: |
    export NVM_DIR="/home/ubuntu/.nvm"
    mkdir -p "$NVM_DIR"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
  args:
    executable: /bin/bash
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
  when: not nvm_check.stat.exists
  register: nvm_install_result
  changed_when: nvm_install_result.stdout is defined and 'already installed' not in nvm_install_result.stdout

- name: Ensure NVM sourcing lines are in .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^export NVM_DIR="\$HOME/\.nvm"$'
    line: 'export NVM_DIR="$HOME/.nvm"'
    state: present
    create: yes
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  become: true

- name: Add NVM script sourcing to .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^\s*\[ -s "\$NVM_DIR/nvm\.sh" \] && \\. "\$NVM_DIR/nvm\.sh"\s*# This loads nvm\s*$'
    line: '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm'
    state: present
  become: true

- name: Add NVM bash completion sourcing to .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^\s*\[ -s "\$NVM_DIR/bash_completion" \] && \\. "\$NVM_DIR/bash_completion"\s*# This loads nvm bash_completion\s*$'
    line: '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion'
    state: present
  become: true

- name: Install latest LTS Node.js and set as default using NVM for user 'ubuntu'
  become: true
  become_user: ubuntu
  shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm install --lts
    nvm alias default lts/*
    nvm use default
    echo "NVM setup complete. Node version: $(node -v), NPM version: $(npm -v)"
  args:
    executable: /bin/bash
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm
  register: nvm_node_install
  changed_when: "nvm_node_install.stdout.find('Now using node') != -1 or nvm_node_install.stdout.find('Checksums matched') != -1"

- name: Show Node and NPM versions installed via NVM
  ansible.builtin.debug:
    var: nvm_node_install.stdout_lines
    verbosity: 1

- name: Installing Node Dependencies using nvm exec
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm exec npm install
  args:
    executable: /bin/bash
    chdir: /home/ubuntu/backend-app
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm

- name: Installing PM2 globally using nvm exec
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm exec npm install pm2 -g
  args:
    executable: /bin/bash
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm
  register: pm2_global_install
  changed_when: pm2_global_install.stdout is defined and ("added " in pm2_global_install.stdout or "changed " in pm2_global_install.stdout)

- name: Fail if ecosystem.config.js is missing
  ansible.builtin.stat:
    path: /home/ubuntu/backend-app/ecosystem.config.js
  register: ecosystem_file
  become: true
  become_user: ubuntu

- name: Abort if ecosystem.config.js not found
  ansible.builtin.fail:
    msg: "ecosystem.config.js is missing in /home/ubuntu/backend-app. Ensure it is included in the build artifact."
  when: not ecosystem_file.stat.exists

- name: Ensuring app is started/restarted with PM2 using nvm exec
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm exec pm2 startOrRestart ecosystem.config.js
  become: true
  become_user: ubuntu
  args:
    chdir: /home/ubuntu/backend-app
    executable: /bin/bash
  environment:
    HOME: /home/ubuntu
    PM2_HOME: /home/ubuntu/.pm2
    NVM_DIR: /home/ubuntu/.nvm
  register: execute_node

- name: Print PM2 start/restart message
  ansible.builtin.debug:
    var: execute_node.stdout_lines
    verbosity: 1

- name: Configure pm2 to start as service on system boot
  become: true
  shell: |
    set -e

    NODE_PATH_CMD="export NVM_DIR='/home/ubuntu/.nvm'; [ -s '$NVM_DIR/nvm.sh' ] && . '$NVM_DIR/nvm.sh'; nvm exec which node"
    PM2_PATH_CMD="export NVM_DIR='/home/ubuntu/.nvm'; [ -s '$NVM_DIR/nvm.sh' ] && . '$NVM_DIR/nvm.sh'; nvm exec which pm2"

    NODE_PATH_UNDER_NVM=$(su - ubuntu -c "$NODE_PATH_CMD")
    PM2_PATH_UNDER_NVM=$(su - ubuntu -c "$PM2_PATH_CMD")

    if [ -z "$PM2_PATH_UNDER_NVM" ] || [ -z "$NODE_PATH_UNDER_NVM" ]; then
      echo "Critical: Could not find pm2 or node under NVM for user ubuntu using 'nvm exec which'. Cannot setup startup script."
      exit 1
    fi

    echo "Debug: Node path for PM2 startup (via nvm exec which): $NODE_PATH_UNDER_NVM"
    echo "Debug: PM2 path for PM2 startup (via nvm exec which): $PM2_PATH_UNDER_NVM"

    env PATH="$PATH:$(dirname "$PM2_PATH_UNDER_NVM"):$(dirname "$NODE_PATH_UNDER_NVM")" "$PM2_PATH_UNDER_NVM" startup systemd -u ubuntu --hp /home/ubuntu
  args:
    executable: /bin/bash
  register: pm2_startup
  changed_when: >
    pm2_startup.stdout is defined and
    'already setup' not in pm2_startup.stdout and
    ('systemd detected' in pm2_startup.stdout or
     '+ Done' in pm2_startup.stdout or
     'command successfully executed' in pm2_startup.stdout or
     'successfully set up' in pm2_startup.stdout or
     'command has been successfully executed' in pm2_startup.stdout)

- name: Save PM2 process list to allow resurrect on reboot using nvm exec
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm exec pm2 save
  become: true
  become_user: ubuntu
  args:
    executable: /bin/bash
  environment:
    HOME: /home/ubuntu
    PM2_HOME: /home/ubuntu/.pm2
    NVM_DIR: /home/ubuntu/.nvm
  changed_when: false

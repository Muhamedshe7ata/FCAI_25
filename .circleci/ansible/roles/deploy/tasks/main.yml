---
# tasks file for deploy role

- name: Creates backend app directory for ubuntu user
  ansible.builtin.file:
    path: /home/ubuntu/backend-app
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'
  become: true

- name: Unarchive backend files into ubuntu user's backend-app directory
  ansible.builtin.unarchive:
    src: artifact.tar.gz
    dest: /home/ubuntu/backend-app
    remote_src: no
  become: true

- name: Ensure correct ownership of unarchived backend files
  ansible.builtin.file:
    path: /home/ubuntu/backend-app
    state: directory
    recurse: yes
    owner: ubuntu
    group: ubuntu
  become: true

- name: Ensure prerequisites for NVM and building Node.js (curl, build-essential)
  ansible.builtin.apt:
    name:
      - curl
      - build-essential
    state: present
    update_cache: yes
  become: true

- name: Check if NVM is already installed for user 'ubuntu'
  ansible.builtin.stat:
    path: /home/ubuntu/.nvm/nvm.sh
  become: true
  become_user: ubuntu
  register: nvm_check

- name: Download and install NVM for user 'ubuntu'
  ansible.builtin.shell: |
    export NVM_DIR="/home/ubuntu/.nvm"
    mkdir -p "$NVM_DIR"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
  args:
    executable: /bin/bash
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
  when: not nvm_check.stat.exists
  register: nvm_install_result
  changed_when: nvm_install_result.stdout is defined and 'already installed' not in nvm_install_result.stdout

- name: Ensure NVM sourcing lines are in .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^export NVM_DIR="\$HOME/\.nvm"$'
    line: 'export NVM_DIR="$HOME/.nvm"'
    state: present
    create: yes
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  become: true

- name: Add NVM script sourcing to .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^\s*\[ -s "\$NVM_DIR/nvm\.sh" \] && \\. "\$NVM_DIR/nvm\.sh"\s*# This loads nvm\s*$'
    line: '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm'
    state: present
  become: true

- name: Add NVM bash completion sourcing to .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^\s*\[ -s "\$NVM_DIR/bash_completion" \] && \\. "\$NVM_DIR/bash_completion"\s*# This loads nvm bash_completion\s*$'
    line: '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion'
    state: present
  become: true

- name: Install latest LTS Node.js and set as default using NVM for user 'ubuntu'
  become: true
  become_user: ubuntu
  shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm install --lts
    nvm alias default lts/*
    nvm use default
    echo "NVM setup complete. Node version: $(node -v), NPM version: $(npm -v)"
  args:
    executable: /bin/bash
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm
  register: nvm_node_install
  changed_when: "nvm_node_install.stdout.find('Now using node') != -1 or nvm_node_install.stdout.find('Checksums matched') != -1"

- name: Show Node and NPM versions installed via NVM
  ansible.builtin.debug:
    var: nvm_node_install.stdout_lines
    verbosity: 1

- name: Installing Node Dependencies using nvm exec
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm exec npm install
  args:
    executable: /bin/bash
    chdir: /home/ubuntu/backend-app
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm

- name: Installing PM2 globally using nvm exec
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm exec npm install pm2 -g
  args:
    executable: /bin/bash
  become: true
  become_user: ubuntu
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm
  register: pm2_global_install
  changed_when: pm2_global_install.stdout is defined and ("added " in pm2_global_install.stdout or "changed " in pm2_global_install.stdout)

# ... (previous tasks in your roles/deploy/tasks/main.yml) ...

# TASK [deploy : Fail if ecosystem.config.js is missing] *************************
- name: Fail if ecosystem.config.js is missing # Or whatever this task actually does to check
  ansible.builtin.stat:
    path: "/home/ubuntu/backend-app/ecosystem.config.js" # Adjust path if needed
  register: ecosystem_config_file
  become: true
  become_user: ubuntu

# TASK [deploy : Abort if ecosystem.config.js not found] *************************
- name: Abort if ecosystem.config.js not found
  ansible.builtin.fail:
    msg: "ecosystem.config.js not found at /home/ubuntu/backend-app/ecosystem.config.js. Aborting."
  when: not ecosystem_config_file.stat.exists

# TASK [deploy : Ensuring app is started/restarted with PM2 using nvm exec] ******
# ... other tasks ...

# ... other tasks ...

- name: Ensuring app is started/restarted with PM2 using specified Node version
  ansible.builtin.shell: |  # Make sure no trailing spaces on this line
    # All lines of the script below MUST be indented more than 'ansible.builtin.shell:'
    export NVM_DIR="/home/ubuntu/.nvm"
    if [ -s "$NVM_DIR/nvm.sh" ]; then
      . "$NVM_DIR/nvm.sh"  # Source NVM (using . instead of \. should be fine here)
      echo "NVM sourced successfully."
    else
      echo "NVM script not found at $NVM_DIR/nvm.sh" >&2
      exit 1 # Fail if NVM can't be sourced
    fi

    cd /home/ubuntu/backend-app || exit 1 # Change to app dir or fail

    # Ensure the target Node version is installed by NVM
    # Using 'nvm ls' instead of 'nvm list' for scripting, and check specific version
    if ! nvm ls v20.11.1 --no-alias --no-colors >/dev/null 2>&1; then
      echo "Node v20.11.1 not found by NVM, attempting to install..." >&2
      nvm install v20.11.1 || (echo "Failed to install Node v20.11.1" >&2 && exit 1)
    fi

    nvm use v20.11.1 || (echo "Failed to use Node v20.11.1" >&2 && exit 1) # Explicitly use v20.11.1
    echo "Using Node version: $(node --version)"
    echo "NPM version: $(npm --version)"
    echo "PM2 path: $(which pm2)" # See where pm2 is found after nvm use

    # Attempt to restart, if it fails (e.g., app not found), then start.
    # Using --env production explicitly on both.
    if pm2 restart ecosystem.config.js --env production --update-env; then
      echo "PM2 restart successful or app was already running and updated."
    else
      echo "PM2 restart failed (app might not be running), attempting pm2 start..."
      pm2 start ecosystem.config.js --env production || (echo "PM2 start also failed." >&2 && exit 1)
    fi
  args:
    executable: /bin/bash
    chdir: /home/ubuntu/backend-app # This chdir might be redundant if 'cd' is in script, but harmless
  become: yes
  become_user: ubuntu
  register: pm2_action_result
  # Adjust changed_when and failed_when as needed based on PM2's actual output
  changed_when: >
    "restarted" in pm2_action_result.stdout or
    "App [my-backend-app] succesfully started" in pm2_action_result.stdout or
    "successfully started" in pm2_action_result.stdout
  failed_when: pm2_action_result.rc != 0 and not ("already launched" in pm2_action_result.stdout or "already started" in pm2_action_result.stdout)

# ... other tasks ...

# TASK [deploy : Print PM2 start/restart message] ********************************
- name: Print PM2 start/restart message
  ansible.builtin.debug:
    msg: "{{ pm2_start_restart_result.stdout_lines }}"
  when: pm2_start_restart_result.stdout_lines is defined and pm2_start_restart_result.stdout_lines | length > 0
  # Your original condition for this skipped task might be different


# roles/deploy/tasks/main.yml (or relevant tasks file)

# ... (previous tasks)

- name: Get Node path under NVM for user 'ubuntu'
  ansible.builtin.shell:
    cmd: |
      export NVM_DIR="/home/ubuntu/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      nvm use default >/dev/null 2>&1 || nvm use lts/* >/dev/null 2>&1
      nvm exec which node
    executable: /bin/bash
  become: true
  become_user: ubuntu
  register: node_path_result
  changed_when: false
  check_mode: no

- name: Get PM2 path under NVM for user 'ubuntu'
  ansible.builtin.shell:
    cmd: |
      export NVM_DIR="/home/ubuntu/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      nvm use default >/dev/null 2>&1 || nvm use lts/* >/dev/null 2>&1
      nvm exec which pm2
    executable: /bin/bash
  become: true
  become_user: ubuntu
  register: pm2_path_result
  changed_when: false
  check_mode: no

# MODIFIED TASK
- name: Set facts for Node and PM2 paths
  ansible.builtin.set_fact:
    node_path_under_nvm: "{{ (node_path_result.stdout | trim).split('\n')[-1] }}"
    pm2_path_under_nvm: "{{ (pm2_path_result.stdout | trim).split('\n')[-1] }}"

- name: Fail if Node or PM2 paths were not found
  ansible.builtin.fail:
    msg: "Critical: Could not find pm2 or node under NVM for user ubuntu. Node path: '{{ node_path_under_nvm }}', PM2 path: '{{ pm2_path_under_nvm }}'"
  when: node_path_under_nvm == "" or pm2_path_under_nvm == "" or not node_path_under_nvm.startswith('/') or not pm2_path_under_nvm.startswith('/')

- name:  Show found paths (optional, good for verification)
  ansible.builtin.debug:
    msg: |
      Node path for PM2 startup: {{ node_path_under_nvm }}
      PM2 path for PM2 startup: {{ pm2_path_under_nvm }}
  when: node_path_under_nvm != "" and pm2_path_under_nvm != ""
  # MODIFIED TASK
- name: Configure pm2 to start as service on system boot
  block:
    - ansible.builtin.command:
        argv:
          - "{{ pm2_path_under_nvm }}" # This will now be the clean path
          - startup
          - systemd
          - -u
          - ubuntu
          - --hp
          - /home/ubuntu
      environment: # <<< MOVED HERE and renamed from 'env'
        PATH: "{{ ansible_env.PATH }}:{{ node_path_under_nvm | dirname }}:{{ pm2_path_under_nvm | dirname }}"
      become: true
  when: pm2_path_under_nvm != "" and node_path_under_nvm != "" and node_path_under_nvm.startswith('/') and pm2_path_under_nvm.startswith('/')

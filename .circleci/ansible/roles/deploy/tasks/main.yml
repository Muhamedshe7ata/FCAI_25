# tasks file for deploy role
---
- name: Creates backend app directory
  ansible.builtin.file:
    path: ~/backend-app # Make sure this is the correct desired path on the server
    state: directory
    mode: '0755' # Set appropriate permissions

- name: Unarchive backend files
  ansible.builtin.unarchive:
    src: artifact.tar.gz # Assuming this is in roles/deploy/files on the controller
    dest: ~/backend-app # The directory created above
    remote_src: no # Specifies src is on the controller

# --- Block to Install Node.js and npm using NVM (Node Version Manager) ---
- name: Ensure prerequisites for NVM and building Node.js (curl, build-essential)
  ansible.builtin.apt:
    name:
      - curl
      - build-essential # Needed if NVM installs from source, good to have
    state: present
    update_cache: yes
  become: true # Run as root

# Install NVM for the 'ubuntu' user
- name: Check if NVM is already installed for user 'ubuntu'
  ansible.builtin.stat:
    path: /home/ubuntu/.nvm/nvm.sh
  become: true
  become_user: ubuntu # Check as ubuntu user
  register: nvm_check

- name: Download and install NVM for user 'ubuntu'
  ansible.builtin.shell: |
    # Fetch the latest NVM version and install
    export NVM_DIR="/home/ubuntu/.nvm"
    mkdir -p "$NVM_DIR"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
  args:
    executable: /bin/bash
    # creates: /home/ubuntu/.nvm/nvm.sh # Handled by nvm_check and when condition
  become: true
  become_user: ubuntu # Run installer as ubuntu user
  environment:
    HOME: /home/ubuntu # NVM installer uses HOME
  when: not nvm_check.stat.exists
  register: nvm_install_result
  changed_when: "'already installed' not in nvm_install_result.stdout_lines | join(' ')" # Be more specific if possible

- name: Ensure NVM sourcing lines are in .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    regexp: '^export NVM_DIR="\$HOME\/\.nvm"$'
    line: 'export NVM_DIR="$HOME/.nvm"'
    state: present
    create: yes # Create .bashrc if it doesn't exist
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  become: true # To manage file owned by root initially or if ubuntu can't write
  become_user: root # Ensure we can write to ubuntu's .bashrc if needed

- name: Add NVM script sourcing to .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    line: '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm'
    state: present
  become: true
  become_user: root

- name: Add NVM bash completion sourcing to .bashrc for user 'ubuntu'
  ansible.builtin.lineinfile:
    path: /home/ubuntu/.bashrc
    line: '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion'
    state: present
  become: true
  become_user: root

- name: Install latest LTS Node.js and set as default using NVM for user 'ubuntu'
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Source NVM
    nvm install --lts       # Install the latest LTS version
    nvm alias default lts/* # Set the installed LTS as the default
    nvm use default         # Ensure it's used in current shell for subsequent tasks if needed by same shell
    echo "Node version: $(node -v)"
    echo "NPM version: $(npm -v)"
  args:
    executable: /bin/bash
    # chdir: /home/ubuntu # Not strictly needed here but doesn't hurt
  become: true
  become_user: ubuntu # Run NVM commands as the ubuntu user
  environment:
    HOME: /home/ubuntu # NVM uses HOME
    NVM_DIR: /home/ubuntu/.nvm # Make NVM_DIR explicit for the shell environment
  register: nvm_node_install
  changed_when: "'is already installed' not in nvm_node_install.stdout" # Only changed if node was actually installed

- name: Show Node and NPM versions installed via NVM
  ansible.builtin.debug:
    msg: "{{ nvm_node_install.stdout_lines }}"
# --- End of Node.js Installation Block using NVM ---

- name: Installing Node Dependencies
  ansible.builtin.shell: | # Switched to shell to ensure NVM environment is sourced
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Source NVM
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    npm install
  args:
    executable: /bin/bash
    chdir: ~/backend-app # Runs npm install inside this directory
  become: true
  become_user: ubuntu # Example: Run npm as the ubuntu user
  environment:
    HOME: /home/ubuntu # Assuming ubuntu user's home directory
    NVM_DIR: /home/ubuntu/.nvm

- name: Installing PM2 globally using NVM's Node
  ansible.builtin.shell: | # Switched to shell to ensure NVM environment
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    npm install pm2 -g
  args:
    executable: /bin/bash
  become: true # Although npm -g is run as ubuntu, some systems might be picky if root creates NVM path initially
  become_user: ubuntu # Install PM2 globally for the Node.js managed by NVM for this user
  environment:
    HOME: /home/ubuntu
    NVM_DIR: /home/ubuntu/.nvm

- name: Ensuring app is started/restarted with PM2
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    # The NVM sourced shell should put the correct pm2 in PATH
    pm2 startOrRestart ecosystem.config.js
  become: true
  become_user: ubuntu
  args:
    chdir: ~/backend-app
    executable: /bin/bash
  environment:
    HOME: /home/ubuntu
    PM2_HOME: /home/ubuntu/.pm2
    NVM_DIR: /home/ubuntu/.nvm
  register: execute_node

- name: Print PM2 start/restart message
  ansible.builtin.debug:
    msg: "{{ execute_node.stdout_lines }}"

- name: Configure pm2 to start as service on system boot
  become: true # Run as root for systemd setup
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    # To find pm2 installed under NVM for the ubuntu user, root needs the PATH
    # that NVM's pm2 was installed into. The `pm2 startup` command also
    # needs to know where node is. NVM's node isn't typically on root's default path.
    # The `-u ubuntu` should handle context, but pm2 and node paths can be tricky.
    # A common path for NVM's globally installed binaries:
    NODE_PATH_UNDER_NVM=$(su - ubuntu -c 'export NVM_DIR="/home/ubuntu/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && which node')
    PM2_PATH_UNDER_NVM=$(su - ubuntu -c 'export NVM_DIR="/home/ubuntu/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && which pm2')

    if [ -z "$PM2_PATH_UNDER_NVM" ] || [ -z "$NODE_PATH_UNDER_NVM" ]; then
      echo "Could not find pm2 or node under NVM for user ubuntu. Cannot setup startup script."
      exit 1
    fi
    
    # Execute pm2 startup with the specific path to PM2 found under NVM
    # This tells systemd where to find pm2 for the ubuntu user.
    env PATH=$PATH:$(dirname $PM2_PATH_UNDER_NVM):$(dirname $NODE_PATH_UNDER_NVM) $PM2_PATH_UNDER_NVM startup systemd -u ubuntu --hp /home/ubuntu
  args:
    executable: /bin/bash
  register: pm2_startup
  changed_when: >
    pm2_startup.stdout is defined and
    'already setup' not in pm2_startup.stdout and
    ('systemd detected' in pm2_startup.stdout or
     '+ Done' in pm2_startup.stdout or
     'command successfully executed' in pm2_startup.stdout or
     'successfully set up' in pm2_startup.stdout or
     'command has been successfully executed' in pm2_startup.stdout)

- name: Save PM2 process list to allow resurrect on reboot
  ansible.builtin.shell: |
    set -e
    export NVM_DIR="/home/ubuntu/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    pm2 save
  become: true
  become_user: ubuntu
  args:
    executable: /bin/bash
  environment:
    HOME: /home/ubuntu
    PM2_HOME: /home/ubuntu/.pm2
    NVM_DIR: /home/ubuntu/.nvm
  changed_when: false